Operator	Operation	Example	Evaluates to...
**	Exponent	2 ** 3	8
%	Modulus/remainder	22 % 8	6
//	Integer division/floored quotient	22 // 8	2
/	Division	22 / 8	2.75
*	Multiplication	3 * 5	15
-	Subtraction	5 - 2	3
+	Addition	2 + 2	4
Chapter 1


Operator	Meaning
==	Equal to
!=	Not equal to
<	Less than
>	Greater than
<=	Less than or equal to
>=	Greater than or equal to

Escape character
Single quote  \'
Double quote \"
Tab \t
Newline (line break) \n
Backslash \\

Regular expressions
http://regexpal.com
?+* act on the left hand side
Python’s regular expressions are greedy by default, which means that in ambiguous situations they will match the longest string possible.
The non-greedy version of the curly brackets, which matches the shortest string possible, has the closing curly bracket followed by a question mark.
Character classes: [0-5]
You can define your own character class using square brackets [tufTUF]. [a-zA-Z0-9] will match all lowercase letters, uppercase letters, and numbers.
^ negative class:  re.compile(r'[^aeiouAEIOU]')
. (or dot) character in a regular expression is called a wildcard and will match any character except for a newline
The caret symbol (^) at the start of a regex to indicate that a match must occur at the beginning of the searched text.
Put a dollar sign ($) at the end of the regex to indicate the string must end with this regex pattern

    The ? matches zero or one of the preceding group.

    The * matches zero or more of the preceding group.

    The + matches one or more of the preceding group.

    The {n} matches exactly n of the preceding group.

    The {n,} matches n or more of the preceding group.

    The {,m} matches 0 to m of the preceding group.

    The {n,m} matches at least n and at most m of the preceding group.

    {n,m}? or *? or +? performs a nongreedy match of the preceding group.

    ^spam means the string must begin with spam.

    spam$ means the string must end with spam.

    The . matches any character, except newline characters.

    \d, \w, and \s match a digit, word, or space character, respectively.

    \D, \W, and \S match anything except a digit, word, or space character, respectively.

    [abc] matches any character between the brackets (such as a, b, or c).

    [^abc] matches any character that isn’t between the brackets.

\d Any numeric digit from 0 to 9.
\D Any character that is not a numeric digit from 0 to 9.
\w Any letter, numeric digit, or the underscore character. (Think of this as matching “word” characters.)
\W Any character that is not a letter, numeric digit, or the underscore character.
\s Any space, tab, or newline character. (Think of this as matching “space” characters.)
\S Any character that is not a space, tab, or newline.

Boolean operator order: first not, than and. At last or
While Schleife:  mit continue sprung an den Anfang

Funktions
Len() = integer value of the number of characters in a string
str() function can be passed an integer value and will evaluate to a string value version of it
int (1.99) would be express to 1
elif else if : It provides another condition that is checked only if all of the previous conditions were F

Types
List
eggs = ['hello', 42, 0.5]
Tuple: 
eggs = ('hello', 42, 0.5)
But the main way that tuples are different from lists is that tuples, like strings, are immutable. Tuples cannot have their values modified, appended, or removed.
Hint for tuple with only one entry:
>>> type(('hello',))
<class 'tuple'>
>>> type(('hello'))
<class 'str'>

Dictionary
In code, a dictionary is typed with braces, {}. Dictionaries can still use integer values as keys, just like lists use integers for indexes, but they do not have to start at 0 and can be any number.

Bei forschleifen kann mittels dictionary.items() auf das Paar key, value oder per zweier variablen auf beide separat zugegriffen werden
for i (k, v) in spam.items():





